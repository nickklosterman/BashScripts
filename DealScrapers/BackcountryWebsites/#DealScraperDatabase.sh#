#!/bin/bash

#This program scrapes the four deal websites and displays the current deal
#It will determines which site has the next upcoming deal and waits until
#that site has a new deal before updating.
#It appears that time isn't linear across all websites as 

#BASH programming caveats
#since there is no compiling I was having the program stop because I was trying to reference a variable that didn't exist bc I had spelled the name wrong.
#This just caused the program to stop dead in its tracks and not progress farther

function checknet()
{
    flag=0
    if eval "ping -c 1 www.djinnius.com > /dev/null"; then
        echo "1"
    else
#if we don't have 'net cuz of sporadic wifi, recheck and sleep in between tries
        for num in 1 2 3 4 5 6
        do
            if eval "ping -c 1 www.djinnius.com > /dev/null"; then
                flag=1
                break
            else
                sleep 10s
            fi
            done
        echo ${flag}
    fi
#I was mistakenly echoing more than just one value and this was causing the subsequent checks on the returned values to barf.  
}
function checknetOLD()
{
#this doesn't seem super robust but I suppose it works
    if eval "ping -c 1 www.djinnius.com > /dev/null"; then
	echo "1"
    else
	echo "0"
    fi
}

function checkdiskspace()
{
    diskspacelimit=$2
    DiskSpace=$(df -h "${1}" | grep -v Filesystem | awk '{ print $4  }' )
    digits=$(df -h "${1}" | grep -v Filesystem | awk '{ print $4  }'| sed 's/.$//' )
    BytesLetter=$(df -h  "${1}" | grep -v Filesystem | awk '{ print $4  }'| sed 's/[0-9]//g' )

    Output=0    

    case $BytesLetter in
	"")
	    Output=0;; #no letter is displayed when there is 0 space left
	"K")
	    Output=0;; #assumes need more than a couple kilobytes :)
	"M")
	    Output=1
            if [ $digits -lt  $diskspacelimit ]
            then 
		Output=0
            fi;;
	*) #account for Gigs and Terabytes etc of space 
	    Output=1;;
    esac
    echo ${Output}
}

function checktmpdiskspace()
{
    Output=$(checkdiskspace /tmp 10 )
    echo ${Output}
}

function checkhomediskspace()
{
#check that /home has at least 10MB fo storage available
    Output=$(checkdiskspace /home 10 )
    echo ${Output}
}

function on_exit()
{
#remove temporary files  
WebpageArray=( "/tmp/SteepAndCheapPage" "/tmp/WhiskeyMilitiaPage" "/tmp/BonktownPage" "/tmp/ChainlovePage" )
    echo "Ok, caught Ctrl-c, exiting after clean up"
    for item in "${WebpageArray[@]}"
    do
	if [ -e ${item}  ]
	then 
	    rm ${item}
	fi
    done
    exit 1

}

function GiveWebsiteCodeGetWebpageTempFile()
{
    case ${2} in
	0)
	    Webpage='/tmp/SteepAndCheapPage';;
	1)
	    Webpage='/tmp/WhiskeyMilitiaPage';;
	2)
	    Webpage='/tmp/BonktownPage';;
	3)
	    Webpage='/tmp/ChainlovePage';;
    esac
    wget ${1} -O ${Webpage} 2>&1 | grep -q "200 OK"
    WgetExitStatus=$?
    if [ $WgetExitStatus -eq 0 ]
    then
	echo ${Webpage}
    else
	echo "Error"
    fi
}

function GivePageReturnText()
{
    OutputText=`grep "<title>" ${1} | sed 's/<title>//' | sed 's/<\/title>//' `
    echo ${OutputText}
}

function GivePageReturnProductDescription()
{
#for the possessive form I need to replace the single quote with double single quotes
    OutputText=`grep "<title>" ${1} |  sed -n 's/[^:]*://p' | sed 's/ - \$.*//;s/\x27/\x27\x27/g' ` #this was causing problems with descriptions that had multiple instances of the colon i.e. there was a colon in the description that caused the front part  of the description to be cut off.
#Explanation: replace everything up to the colon that isn't a colon with nothing, print the rest
    echo ${OutputText}
}

function GivePageReturnPrice()
{
    OutputText=`grep "<title>" ${1} | sed 's/.*[\$]//' | sed 's/- .*//' `
    echo ${OutputText}
}

function GivePageReturnPercentOffMSRP()
{
    OutputText=`grep "<title>" ${1} |  sed 's/.* - //;s/%.*//' `
# or could use the tag stripping command of sed 's/<[^>]*>//g'
    echo ${OutputText}
}

GiveDatabaseTablenameDataEnterIntoDatabase()
{
    sqlite3 ${1} "insert into ${2} (websiteCode, product, price, percentOffMSRP, quantity, dealdurationinminutes) values ( '${3}', '${4}', '${5}', '${6}', '${7}', '${8}' );"
}

function GiveWebsiteAndDatabaseReturnWebsiteCodeFromDatabase()
{
    Website=${1}
    Database=${2}

}

function GivePageReturnTotalQuantity()
{
    TotalQuantity=`grep total_qty_bar.set_data\( ${1} | sed 's/.*,//;s/[)].*//' `
    echo ${TotalQuantity}
}

function GivePageReturnDurationOfDealInMinutes()
{
    DurationOfDeal=` grep "Time Remaining:" ${1} -A 4 | grep bar_full | sed 's/<[^>]*>//g' `
    if [ "${DurationOfDeal}" == "" ]
    then
#then its teh alternate time form
	DurationOfDeal=`grep "total_time" ${1} | sed 's/<[^>]*//g; s/[^0-9]//g' `
#first we grep for total_time then remove html tags then remove everything but the numbers
#to just capture all numbers add a * after the pattern
    fi
    echo ${DurationOfDeal}
}

function GiveSecondsReturnMinutesAndSeconds()
{
    input=${1}

#YOU WEREN"T QUOTING YOUR VARIABLE! THAT IS WHY THIS WAS FAILING
    if [ "${input}" == "" ] # \n check if null with -z ${input}
    then 
	echo "Null time"
	input=99999
    fi
    let "minutes = ${1} / 60"
    let "seconds = ${1} % 60 "
    printf "%d:%02d" ${minutes} ${seconds}

}

#Input: webpage file
#output: extracts time remaining of the item for sale on the page
function GivePageReturnTimeRemainingInSeconds()
{
#two forms setupTimerBar or setupWMTimerBar
    TimeRemainingInSeconds=`grep "TimerBar" ${1} | sed 's/.*(//' | sed 's/,.*//'   `
#if the value somehow comes out negative then we'll just wait X more seconds and hit it again
    Quantity=$(GivePageReturnTotalQuantity ${1})
    Price=$(GivePageReturnPrice  ${1})
#since price is floating point value we need to use bc to perform the math comparison
#alternatively, since we don't require any great precision, we could use printf and only have the digits before the decimal point used.
    if [ $Quantity -lt 5 ] && [ $(echo "$Price < 300" | bc ) -eq 1 ] 
    then
# if there is a low quantity we run the risk of the item selling out and moving on to the next deal so we set the timer manually just in case this happens
	TimeRemainingInSeconds=180 # 3minutes
    else
	if [ ${TimeRemainingInSeconds} -lt 0 ]
	then
	    TimeRemainingInSeconds=4
	fi
    fi
    echo ${TimeRemainingInSeconds}
}

function GiveTimeInSecondsReturnDealEndTime()
{
#this was found here:http://www.askdavetaylor.com/date_math_in_linux_shell_script.html about 2/3 of the way down you'll see a post by marcus that is where it came from                                                                                                                                                  
    NumDaysAdjust=0
    Output=`date --date @$(($(date +%s)-(3600*24*${NumDaysAdjust})+${1} )) +%T`
    echo ${Output}
}

function GiveDatabaseTableWebPageWebsiteCodeEnterDataIntoDatabase()
{
    Database=${1}
    Table=${2}
    Webpage=${3}
    WebsiteCode=${4}
#enter data into database
    ProductDescription=$(GivePageReturnProductDescription ${Webpage} ) 
    Price=$(GivePageReturnPrice ${Webpage} )
    PercentOffMSRP=$(GivePageReturnPercentOffMSRP ${Webpage} )
    TotalQuantity=$(GivePageReturnTotalQuantity ${Webpage} ) 
    DurationInMinutes=$(GivePageReturnDurationOfDealInMinutes ${Webpage} ) 

    PreviousProduct=$( GiveDatabaseTableNameWebsiteCodeGetLastProductEntryFromDatabase  ${Database} ${Table} ${WebsiteCode} )
    PreviousTimeEnter=$( GiveDatabaseTableNameWebsiteCodeGetLastTimeEnterEntryFromDatabase  ${Database} ${Table} ${WebsiteCode} )
    PreviousDealDurationInMinutes=$( GiveDatabaseTableNameWebsiteCodeGetLastDealDurationInMinutesEntryFromDatabase  ${Database} ${Table} ${WebsiteCode} )
    PreviousProductDescription=${PreviousProduct/\'/\'\'} 

#We need to compare to the variable with the double single quotes since that is how we need to enter the string into the database
    if [ "${PreviousProductDescription}" != "${ProductDescription}" ]
    then
	echo "Entering new product info into database."
	GiveDatabaseTablenameDataEnterIntoDatabase  ${Database} ${Table} ${WebsiteCode} "${ProductDescription}" ${Price} ${PercentOffMSRP} ${TotalQuantity} ${DurationInMinutes}
    else
#prevent duplicate entries sequentially but allow duplicates if a certain period has passed therefore giving a check saying that we are pretty sure that this is just a repeat that day/week/whatever

	TimeComparison=$( CompareDateToNow "$PreviousTimeEnter" ${PreviousDealDurationInMinutes} )
	One=1

	if [ "$TimeComparison" -eq "$One" ] 
	then 
	    echo "Entering new product info into database."
	    GiveDatabaseTablenameDataEnterIntoDatabase  ${Database} ${Table} ${WebsiteCode} "${ProductDescription}" ${Price} ${PercentOffMSRP} ${TotalQuantity} ${DurationInMinutes}
	else
	    echo "Product the same, but time difference too little from previous entry."
	fi

	
    fi

}

function CompareDateToNow
{
#The problem I was having was that i was comparing utc time from the db to local time, i needed to compare utc to utc times.

    DateToCompare="${1}"
    MinuteThreshold=${2}
#we'll use the TC suffix to mean ToCompare
    YearTC="${DateToCompare:0:4}" #don't leave a space btw the = and " or I won't work
    MonthTC="${DateToCompare:5:2}" 
    DayTC="${DateToCompare:8:2}" 
    HourTC="${DateToCompare:11:2}" 
    MinutesTC="${DateToCompare:14:2}" 
    SecondsTC="${DateToCompare:17:2}" 
    YearTCSeconds=$(( 365*24*60*60*($YearTC-1970) ))
#`expr 365*24*60*60*($YearTC-1970) ` #this is supposed to work but didn't. maybe I'm donig something wrong
# we add the 10# infront of the variable to force the base to be decimal instead of octal (since we might get times that are 08 and then eprform math on them.  This will cause and error of "value too great for base (error token is "09")" or "08" this is because in octal 07 is the highest it can go.
    MonthTCSeconds=$(( 10#$MonthTC*31*24*60*60 ))  #`expr $MonthTC*31*24*60*60`
    DayTCSeconds=$(( 10#$DayTC*24*60*60 ))
    HourTCSeconds=$(( 10#$HourTC*60*60 ))
    MinutesTCSeconds=$(( 10#$MinutesTC*60  ))
    SecondsTCTotalSince1970=$(( $YearTCSeconds+$MonthTCSeconds+$DayTCSeconds+$HourTCSeconds+$MinutesTCSeconds+10#$SecondsTC ))

    Year=$( date --utc +%Y )
    Month=$( date --utc +%m )
    Day=$( date --utc +%d )
    Hour=$( date --utc +%H )
    Minute=$( date --utc +%M )
    Second=$( date --utc +%S )
    SecondsTotalSince1970=$(( (10#${Year}-1970)*365*24*60*60+10#${Month}*31*24*60*60+10#${Day}*24*60*60+10#${Hour}*60*60+10#${Minute}*60+10#${Second} ))
#echo $SecondsTCTotalSince1970 $SecondsTotalSince1970
#echo "SecsTC" $SecondsTCTotalSince1970 "SecsTotal" $SecondsTotalSince1970
    SecondsBetweenTimes=$(( $SecondsTotalSince1970-$SecondsTCTotalSince1970 ))
    Threshold=$(( ${MinuteThreshold}*60 ))
 #   echo "SEcsbtwTimes" $SecondsBetweenTimes "Thresh" $Threshold
    if  [ "$SecondsBetweenTimes" -lt "$Threshold" ] 
    then 
#We don't want to add the item into the database bc the product names are the same and the time difference isn't enough
	echo "0"
    else
#the time difference iis enough that we want to enter the item into the database even if the product names are the same.
	echo "1"
    fi

}

function GiveDatabaseTableNameWebsiteCodeGetLastDealDurationInMinutesEntryFromDatabase
{
    Database=${1}
    TableName=${2}
    WebsiteCode=$3
#echo $Database $TableName $WebsiteCode
    Query="select dealdurationinminutes from ${TableName} where websitecode=${WebsiteCode} order by Bkey desc limit 1"
    sqlite3 ${Database} "${Query}"
}

function GiveDatabaseTableNameWebsiteCodeGetLastProductEntryFromDatabase
{

    Database=${1}
    TableName=${2}
    WebsiteCode=$3
#echo $Database $TableName $WebsiteCode
    Query="select product from ${TableName} where websitecode=${WebsiteCode} order by Bkey desc limit 1"

        sqlite3 ${Database} "${Query}"
}

function GiveDatabaseTableNameWebsiteCodeGetLastTimeEnterEntryFromDatabase
{

    Database=${1}
    TableName=${2}
    WebsiteCode=$3
#echo $Database $TableName $WebsiteCode
    Query="select timeEnter from ${TableName} where websitecode=${WebsiteCode} order by Bkey desc limit 1"
    sqlite3 ${Database} "${Query}"
}

#--------------------------
# BEGIN MAIN PART OF SCRIPT
#--------------------------

#Initialize our temp variables so on first go round we compare and come up false so we update
SteepAndCheapTemp=""
WhiskeyMilitiaTemp=""
BonktownTemp=""
ChainloveTemp=""
trap on_exit SIGINT
#check that the database exists and create if it doesn't
if [ !  -e  "test.db"  ]
then
    echo "database nonexistent, creating"
    sqlite3 test.db "create table Backcountrydeals (Bkey INTEGER PRIMARY KEY, websiteCode int, product TEXT, price double, percentOffMSRP int, quantity int, dealdurationinminutes int, timeEnter DATE);"
    sqlite3 test.db "create table WebsiteCodes (WKey INTEGER PRIMARY KEY, website TEXT, websiteCode int);"
    sqlite3 test.db "insert into WebsiteCodes (website, websiteCode) values ('Steep and Cheap', 0);"
    sqlite3 test.db "insert into WebsiteCodes (website, websiteCode) values ('WhiskeyMilitia', 1);"
    sqlite3 test.db "insert into WebsiteCodes (website, websiteCode) values ('Bonktown', 2);"
    sqlite3 test.db "insert into WebsiteCodes (website, websiteCode) values ('Chainlove', 3);"
    sqlite3 test.db <<EOF 
CREATE TRIGGER insert__timeEnter AFTER  INSERT ON Backcountrydeals
     BEGIN
      UPDATE Backcountrydeals SET timeEnter = DATETIME('NOW')  WHERE rowid = new.rowid;
     END;
EOF
    
fi
TmpDiskSpaceStatus=$( checktmpdiskspace )
HomeDiskSpaceStatus=$( checkhomediskspace )
NetStatus=$( checknet )
while [[ $TmpDiskSpaceStatus -eq 1 && $HomeDiskSpaceStatus -eq 1 && $NetStatus -eq 1 ]] ; do 
    SteepAndCheapPage=$(GiveWebsiteCodeGetWebpageTempFile http://www.steepandcheap.com 0 )
    if [ "$SteepAndCheapPage" != "Error" ] 
    then 
	SteepAndCheap=$(GivePageReturnText ${SteepAndCheapPage} )
#if there are changes to the item description then we update and print the new info
	if [ "${SteepAndCheap}" != "${SteepAndCheapTemp}" ]
	then
	    SCTimeLeftSeconds=$(GivePageReturnTimeRemainingInSeconds ${SteepAndCheapPage})
	    echo ${SteepAndCheap} 

	    GiveDatabaseTableWebPageWebsiteCodeEnterDataIntoDatabase "test.db" "Backcountrydeals" ${SteepAndCheapPage} 0

#copy content to our temp holder so we can see if things changed.
	    SteepAndCheapTemp=`echo ${SteepAndCheap}`
	fi
    else
	echo "Wget didn't return a 200 OK response when getting the Steep and Cheap webpage"
	SNCTimeLeftSeconds=120
    fi
    WhiskeyMilitiaPage=$(GiveWebsiteCodeGetWebpageTempFile http://www.whiskeymilitia.com 1 )
    if [ "$WhiskeyMilitiaPage" != "Error" ]
    then 
	WhiskeyMilitia=$(GivePageReturnText ${WhiskeyMilitiaPage} )
	WMTimeLeftSeconds=$(GivePageReturnTimeRemainingInSeconds ${WhiskeyMilitiaPage})

	if [ "${WhiskeyMilitia}" != "${WhiskeyMilitiaTemp}" ]
	then
	    echo ${WhiskeyMilitia}
	    GiveDatabaseTableWebPageWebsiteCodeEnterDataIntoDatabase "test.db" "Backcountrydeals"  ${WhiskeyMilitiaPage} 1
	    WhiskeyMilitiaTemp=`echo ${WhiskeyMilitia}`
	fi
    else
	echo "Wget didn't return a 200 OK response when getting the Whiskey Militia webpage"
	WMTimeLeftSeconds=120
    fi

    BonktownPage=$(GiveWebsiteCodeGetWebpageTempFile http://www.bonktown.com 2 )
    if [ "$BonktownPage" != "Error" ]
    then 
	Bonktown=$(GivePageReturnText ${BonktownPage} )
	BTTimeLeftSeconds=$(GivePageReturnTimeRemainingInSeconds ${BonktownPage})

	if [ "${Bonktown}" != "${BonktownTemp}" ]
	then
	    echo ${Bonktown}
	    GiveDatabaseTableWebPageWebsiteCodeEnterDataIntoDatabase test.db "Backcountrydeals"  ${BonktownPage} 2
	    BonktownTemp=`echo ${Bonktown}`
	fi
    else
	echo "Wget didn't return a 200 OK response when getting the Bonktown webpage"
	BTTimeLeftSeconds=120
    fi

    ChainlovePage=$(GiveWebsiteCodeGetWebpageTempFile http://www.chainlove.com 3 )
    if [ "$ChainlovePage" != "Error" ]  
    then 
	Chainlove=$(GivePageReturnText ${ChainlovePage} )
	CLTimeLeftSeconds=$(GivePageReturnTimeRemainingInSeconds ${ChainlovePage})
	if [ "${Chainlove}" != "${ChainloveTemp}" ]
	then
	    echo ${Chainlove}
	    GiveDatabaseTableWebPageWebsiteCodeEnterDataIntoDatabase test.db Backcountrydeals  ${ChainlovePage} 3
	    ChainloveTemp=`echo ${Chainlove}`
	fi
    else
	echo "Wget didn't return a 200 OK response when getting the Chainlove webpage"
	CLTimeLeftSeconds=120
    fi

    SleepTime=${SCTimeLeftSeconds}
    NextDeal="SteepAndCheap"
    if [ ${WMTimeLeftSeconds} -lt ${SleepTime} ]
    then
	SleepTime=${WMTimeLeftSeconds}
	NextDeal="WhiskeyMilitia"
    fi
    if [ ${BTTimeLeftSeconds} -lt ${SleepTime} ] 
    then
	SleepTime=${BTTimeLeftSeconds}
	NextDeal="Bonktown"
    fi
    if [ ${CLTimeLeftSeconds} -lt ${SleepTime} ]
    then
	SleepTime=${CLTimeLeftSeconds} 
	NextDeal="Chainlove"
    fi

#it'd be nice if we could print the time ticking down and then refresh with the new deals. use "print" maybe?

    SleepTimeMinutesSeconds=$(GiveSecondsReturnMinutesAndSeconds ${SleepTime})
    DealEndTime=$( GiveTimeInSecondsReturnDealEndTime ${SleepTime} )
    echo "Next deal at ${NextDeal} in ${SleepTimeMinutesSeconds} minutes from" `date +%T ` "which occurs at ${DealEndTime}"
    sleep ${SleepTime}s
    TmpDiskSpaceStatus=$(checktmpdiskspace )
    HomeDiskSpaceStatus=$(checkhomediskspace )
    NetStatus=$(checknet )

    
done
if [ "$TmpDiskSpaceStatus" -ne 1 ]
then
    echo "Tmp disk space too low. Exiting"
fi
if [ "$HomeDiskSpaceStatus" -ne 1 ]
then
    echo "Home disk space too low. Exiting"
fi
if [ "$NetStatus" -ne 1 ]
then
    echo "The internet is unreachable. Exiting"
fi
